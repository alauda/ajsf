{
  "apiVersion": "operators.coreos.com/v1alpha1",
  "kind": "ClusterServiceVersion",
  "metadata": {
    "annotations": {
      "alm-examples": "[\n  {\n    \"apiVersion\":\"kafka.strimzi.io/v1beta1\",\n    \"kind\":\"Kafka\",\n    \"metadata\":{\n      \"name\":\"my-cluster\"\n    },\n    \"spec\":{\n      \"kafka\":{\n          \"version\":\"2.5.0\",\n          \"replicas\":3,\n          \"listeners\":{\n            \"plain\":{\n              \"authentiation\":{\n                  \"type\":\"scram-sha-512\"\n                }\n              },\n            \"tls\":{\n              \"authentiation\":{\n                    \"type\":\"tls\"\n                  }\n              }\n          },\n          \"config\":{\n            \"offsets.topic.replication.factor\":3,\n            \"transaction.state.log.replication.factor\":3,\n            \"transaction.state.log.min.isr\":2,\n            \"log.message.format.version\":\"2.5\"\n          },\n          \"storage\":{\n            \"type\":\"ephemeral\"\n          }\n      },\n      \"zookeeper\":{\n          \"replicas\":3,\n          \"storage\":{\n            \"type\":\"ephemeral\"\n          }\n      },\n      \"entityOperator\":{\n          \"topicOperator\":{\n              \"reconciliationIntervalSeconds\":90\n            },\n          \"userOperator\":{\n              \"reconciliationIntervalSeconds\":120\n            }\n      }\n    }\n  },\n  {\n    \"apiVersion\":\"kafka.strimzi.io/v1beta1\",\n    \"kind\":\"KafkaConnect\",\n    \"metadata\":{\n      \"name\":\"my-connect-cluster\"\n    },\n    \"spec\":{\n      \"version\":\"2.5.0\",\n      \"replicas\":1,\n      \"bootstrapServers\":\"my-cluster-kafka-bootstrap:9093\",\n      \"tls\":{\n          \"trustedCertificates\":[\n            {\n                \"secretName\":\"my-cluster-cluster-ca-cert\",\n                \"certificate\":\"ca.crt\"\n            }\n          ]\n      }\n    }\n  },\n  {\n    \"apiVersion\":\"kafka.strimzi.io/v1beta1\",\n    \"kind\":\"KafkaConnectS2I\",\n    \"metadata\":{\n      \"name\":\"my-connect-cluster\"\n    },\n    \"spec\":{\n      \"version\":\"2.5.0\",\n      \"replicas\":1,\n      \"bootstrapServers\":\"my-cluster-kafka-bootstrap:9093\",\n      \"tls\":{\n          \"trustedCertificates\":[\n            {\n                \"secretName\":\"my-cluster-cluster-ca-cert\",\n                \"certificate\":\"ca.crt\"\n            }\n          ]\n      }\n    }\n  },\n  {\n    \"apiVersion\":\"kafka.strimzi.io/v1beta1\",\n    \"kind\":\"KafkaMirrorMaker\",\n    \"metadata\":{\n      \"name\":\"my-mirror-maker\"\n    },\n    \"spec\":{\n      \"version\":\"2.5.0\",\n      \"replicas\":1,\n      \"consumer\":{\n          \"bootstrapServers\":\"my-source-cluster-kafka-bootstrap:9092\",\n          \"groupId\":\"my-source-group-id\"\n      },\n      \"producer\":{\n          \"bootstrapServers\":\"my-target-cluster-kafka-bootstrap:9092\"\n      },\n      \"whitelist\":\".*\"\n    }\n  },\n  {\n    \"apiVersion\":\"kafka.strimzi.io/v1alpha1\",\n    \"kind\":\"KafkaBridge\",\n    \"metadata\":{\n      \"name\":\"my-bridge\"\n    },\n    \"spec\":{\n      \"replicas\":1,\n      \"bootstrapServers\":\"my-cluster-kafka-bootstrap:9092\",\n      \"http\":{\n          \"port\":8080\n      }\n    }\n  },\n  {\n    \"apiVersion\":\"kafka.strimzi.io/v1beta1\",\n    \"kind\":\"KafkaTopic\",\n    \"metadata\":{\n      \"name\":\"my-topic\",\n      \"labels\":{\n          \"strimzi.io/cluster\":\"my-cluster\"\n      }\n    },\n    \"spec\":{\n      \"partitions\":10,\n      \"replicas\":3,\n      \"config\":{\n          \"retention.ms\":604800000,\n          \"segment.bytes\":1073741824\n      }\n    }\n  },\n  {\n    \"apiVersion\":\"kafka.strimzi.io/v1beta1\",\n    \"kind\":\"KafkaUser\",\n    \"metadata\":{\n      \"name\":\"my-user\",\n      \"labels\":{\n          \"strimzi.io/cluster\":\"my-cluster\"\n      }\n    },\n    \"spec\":{\n      \"authentication\":{\n          \"type\":\"tls\"\n      },\n      \"authorization\":{\n          \"type\":\"simple\",\n          \"acls\":[\n            {\n                \"resource\":{\n                  \"type\":\"topic\",\n                  \"name\":\"my-topic\",\n                  \"patternType\":\"literal\"\n                },\n                \"operation\":\"Read\",\n                \"host\":\"*\"\n            },\n            {\n                \"resource\":{\n                  \"type\":\"topic\",\n                  \"name\":\"my-topic\",\n                  \"patternType\":\"literal\"\n                },\n                \"operation\":\"Describe\",\n                \"host\":\"*\"\n            },\n            {\n                \"resource\":{\n                  \"type\":\"group\",\n                  \"name\":\"my-group\",\n                  \"patternType\":\"literal\"\n                },\n                \"operation\":\"Read\",\n                \"host\":\"*\"\n            },\n            {\n                \"resource\":{\n                  \"type\":\"topic\",\n                  \"name\":\"my-topic\",\n                  \"patternType\":\"literal\"\n                },\n                \"operation\":\"Write\",\n                \"host\":\"*\"\n            },\n            {\n                \"resource\":{\n                  \"type\":\"topic\",\n                  \"name\":\"my-topic\",\n                  \"patternType\":\"literal\"\n                },\n                \"operation\":\"Create\",\n                \"host\":\"*\"\n            },\n            {\n                \"resource\":{\n                  \"type\":\"topic\",\n                  \"name\":\"my-topic\",\n                  \"patternType\":\"literal\"\n                },\n                \"operation\":\"Describe\",\n                \"host\":\"*\"\n            }\n          ]\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"kafka.strimzi.io/v1alpha1\",\n    \"kind\": \"KafkaConnector\",\n    \"metadata\": {\n      \"name\": \"my-source-connector\",\n      \"labels\": {\n        \"strimzi.io/cluster\": \"my-connect-cluster\"\n      }\n    },\n    \"spec\": {\n      \"class\": \"org.apache.kafka.connect.file.FileStreamSourceConnector\",\n      \"tasksMax\": 2,\n      \"config\": {\n        \"file\": \"/opt/kafka/LICENSE\",\n        \"topic\": \"my-topic\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"kafka.strimzi.io/v1alpha1\",\n    \"kind\": \"KafkaMirrorMaker2\",\n    \"metadata\": {\n      \"name\": \"my-mm2-cluster\"\n    },\n    \"spec\": {\n      \"version\":\"2.5.0\",\n      \"replicas\": 1,\n      \"connectCluster\": \"my-cluster-target\",\n      \"clusters\": [\n        {\n          \"alias\": \"my-cluster-source\",\n          \"bootstrapServers\": \"my-cluster-source-kafka-bootstrap:9092\"\n        },\n        {\n          \"alias\": \"my-cluster-target\",\n          \"bootstrapServers\": \"my-cluster-target-kafka-bootstrap:9092\",\n          \"config\": {\n            \"config.storage.replication.factor\": 1,\n            \"offset.storage.replication.factor\": 1,\n            \"status.storage.replication.factor\": 1\n          }\n        }\n      ],\n      \"mirrors\": [\n        {\n          \"sourceCluster\": \"my-cluster-source\",\n          \"targetCluster\": \"my-cluster-target\",\n          \"sourceConnector\": {\n            \"config\": {\n              \"replication.factor\": 1,\n              \"offset-syncs.topic.replication.factor\": 1,\n              \"sync.topic.acls.enabled\": \"false\"\n            }\n          },\n          \"heartbeatConnector\": {\n            \"config\": {\n              \"heartbeats.topic.replication.factor\": 1\n            }\n          },\n          \"checkpointConnector\": {\n            \"config\": {\n              \"checkpoints.topic.replication.factor\": 1\n            }\n          },\n          \"topicsPattern\": \".*\",\n          \"groupsPattern\": \".*\"\n        }\n      ]\n    }\n  },\n  {\n    \"apiVersion\": \"kafka.strimzi.io/v1alpha1\",\n    \"kind\": \"KafkaRebalance\",\n    \"metadata\": {\n      \"name\": \"my-rebalance\",\n      \"labels\": {\n        \"strimzi.io/cluster\": \"my-cluster\"\n      }\n    },\n    \"spec\": {\n      \"goals\": [\n        \"NetworkInboundCapacityGoal\",\n        \"DiskCapacityGoal\",\n        \"RackAwareGoal\",\n        \"NetworkOutboundCapacityGoal\",\n        \"CpuCapacityGoal\",\n        \"ReplicaCapacityGoal\"\n      ]\n    }\n  }\n]",
      "capabilities": "Deep Insights",
      "categories": "Streaming \u0026 Messaging",
      "certified": "false",
      "containerImage": "docker.io/strimzi/operator:0.19.0",
      "createdAt": "2020-07-27 22:49:00",
      "description": "Strimzi provides a way to run an Apache Kafka cluster on Kubernetes or OpenShift in various deployment configurations.",
      "olm.operatorGroup": "global-operators",
      "olm.operatorNamespace": "openshift-operators",
      "olm.targetNamespaces": "",
      "operators.openshift.io/infrastructure-features": "[\"Disconnected\", \"Proxy\"]",
      "repository": "https://github.com/strimzi/strimzi-kafka-operator",
      "support": "Strimzi"
    },
    "creationTimestamp": "2020-07-29T16:47:31Z",
    "generation": 1,
    "labels": {
      "olm.api.6273c3bcf137abc4": "provided",
      "olm.api.8dfce743b2870087": "provided",
      "olm.api.9a53437aa4e3dffc": "provided",
      "olm.api.bb5a21030923c41": "provided",
      "olm.api.cb828d585f2b1352": "provided",
      "olm.api.ce9e44d2da7a55c8": "provided",
      "olm.api.e2355e2231ab0e28": "provided",
      "olm.api.ea2b855bf45cc1cb": "provided",
      "olm.api.ea5f616acc84f738": "provided",
      "olm.api.ed5ef63db227d3fe": "provided"
    },
    "name": "strimzi-cluster-operator.v0.19.0",
    "namespace": "openshift-operators",
    "resourceVersion": "28685903",
    "selfLink": "/apis/operators.coreos.com/v1alpha1/namespaces/openshift-operators/clusterserviceversions/strimzi-cluster-operator.v0.19.0",
    "uid": "d8f0e912-f8cc-485e-b196-e30bca248cbe"
  },
  "spec": {
    "apiservicedefinitions": {},
    "customresourcedefinitions": {
      "owned": [
        {
          "description": "Represents a Kafka cluster",
          "displayName": "Kafka",
          "kind": "Kafka",
          "name": "kafkas.kafka.strimzi.io",
          "resources": [
            { "kind": "Route", "name": "", "version": "route.openshift.io/v1" },
            { "kind": "Service", "name": "", "version": "v1" },
            { "kind": "StatefulSet", "name": "", "version": "v1" },
            { "kind": "Deployment", "name": "", "version": "v1" },
            { "kind": "ReplicaSet", "name": "", "version": "v1" },
            { "kind": "Pod", "name": "", "version": "v1" },
            { "kind": "Secret", "name": "", "version": "v1" }
          ],
          "specDescriptors": [
            {
              "description": "Kafka version",
              "displayName": "Version",
              "path": "kafka.version",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The desired number of Kafka brokers.",
              "displayName": "Kafka Brokers",
              "path": "kafka.replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:podCount"]
            },
            {
              "description": "The type of storage used by Kafka brokers",
              "displayName": "Kafka storage",
              "path": "kafka.storage.type",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:select:ephemeral",
                "urn:alm:descriptor:com.tectonic.ui:select:persistent-claim",
                "urn:alm:descriptor:com.tectonic.ui:select:jbod"
              ]
            },
            {
              "description": "Limits describes the minimum/maximum amount of compute resources required/allowed",
              "displayName": "Kafka Resource Requirements",
              "path": "kafka.resources",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
              ]
            },
            {
              "description": "The desired number of Zookeeper nodes.",
              "displayName": "Zookeeper Nodes",
              "path": "zookeeper.replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:podCount"]
            },
            {
              "description": "The type of storage used by Zookeeper nodes",
              "displayName": "Zookeeper storage",
              "path": "zookeeper.storage.type",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:select:ephemeral",
                "urn:alm:descriptor:com.tectonic.ui:select:persistent-claim",
                "urn:alm:descriptor:com.tectonic.ui:select:jbod"
              ]
            },
            {
              "description": "Limits describes the minimum/maximum amount of compute resources required/allowed",
              "displayName": "Zookeeper Resource Requirements",
              "path": "zookeeper.resources",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka cluster conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1beta1"
        },
        {
          "description": "Represents a Kafka Connect cluster",
          "displayName": "Kafka Connect",
          "kind": "KafkaConnect",
          "name": "kafkaconnects.kafka.strimzi.io",
          "resources": [
            { "kind": "Service", "name": "", "version": "v1" },
            { "kind": "Deployment", "name": "", "version": "v1" },
            { "kind": "ReplicaSet", "name": "", "version": "v1" },
            { "kind": "Pod", "name": "", "version": "v1" }
          ],
          "specDescriptors": [
            {
              "description": "The desired number of Kafka Connect nodes.",
              "displayName": "Connect nodes",
              "path": "replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:podCount"]
            },
            {
              "description": "Kafka Connect version",
              "displayName": "Version",
              "path": "version",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The address of the bootstrap server",
              "displayName": "Bootstrap server",
              "path": "bootstrapServers",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "Limits describes the minimum/maximum amount of compute resources required/allowed",
              "displayName": "Resource Requirements",
              "path": "resources",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka Connect conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1beta1"
        },
        {
          "description": "Represents a Kafka Connect cluster with Source 2 Image support",
          "displayName": "Kafka Connect Source to Image",
          "kind": "KafkaConnectS2I",
          "name": "kafkaconnects2is.kafka.strimzi.io",
          "resources": [
            { "kind": "Service", "name": "", "version": "v1" },
            {
              "kind": "DeploymentConfig",
              "name": "",
              "version": "apps.openshift.io/v1"
            },
            { "kind": "ReplicationController", "name": "", "version": "v1" },
            { "kind": "Pod", "name": "", "version": "v1" },
            {
              "kind": "BuildConfig",
              "name": "",
              "version": "build.openshift.io/v1"
            },
            {
              "kind": "ImageStream",
              "name": "",
              "version": "image.openshift.io/v1"
            }
          ],
          "specDescriptors": [
            {
              "description": "The desired number of Kafka Connect nodes.",
              "displayName": "Connect nodes",
              "path": "replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:podCount"]
            },
            {
              "description": "Kafka Connect version",
              "displayName": "Version",
              "path": "version",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The address of the bootstrap server",
              "displayName": "Bootstrap server",
              "path": "bootstrapServers",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "Limits describes the minimum/maximum amount of compute resources required/allowed",
              "displayName": "Resource Requirements",
              "path": "resources",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka Connect conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1beta1"
        },
        {
          "description": "Represents a Kafka MirrorMaker cluster",
          "displayName": "Kafka Mirror Maker",
          "kind": "KafkaMirrorMaker",
          "name": "kafkamirrormakers.kafka.strimzi.io",
          "resources": [
            { "kind": "Deployment", "name": "", "version": "v1" },
            { "kind": "ReplicaSet", "name": "", "version": "v1" },
            { "kind": "Pod", "name": "", "version": "v1" }
          ],
          "specDescriptors": [
            {
              "description": "The desired number of Kafka MirrorMaker nodes.",
              "displayName": "MirrorMaker nodes",
              "path": "replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:podCount"]
            },
            {
              "description": "Kafka Mirror Maker version",
              "displayName": "Version",
              "path": "version",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The bootstrap address of the Source cluster",
              "displayName": "Source cluster",
              "path": "consumer.bootstrapServers",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The bootstrap address of the Target cluster",
              "displayName": "Target cluster",
              "path": "producer.bootstrapServers",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "Expression specifying the topics which should be mirrored",
              "displayName": "Mirrored topics",
              "path": "whitelist",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "Limits describes the minimum/maximum amount of compute resources required/allowed",
              "displayName": "Resource Requirements",
              "path": "resources",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka MirrorMaker conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1beta1"
        },
        {
          "description": "Represents a Kafka Bridge cluster",
          "displayName": "Kafka Bridge",
          "kind": "KafkaBridge",
          "name": "kafkabridges.kafka.strimzi.io",
          "resources": [
            { "kind": "Deployment", "name": "", "version": "v1" },
            { "kind": "ReplicaSet", "name": "", "version": "v1" },
            { "kind": "Pod", "name": "", "version": "v1" },
            { "kind": "Service", "name": "", "version": "v1" }
          ],
          "specDescriptors": [
            {
              "description": "The desired number of Kafka Bridge nodes.",
              "displayName": "Bridge nodes",
              "path": "replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:podCount"]
            },
            {
              "description": "The bootstrap address of the Kafka cluster",
              "displayName": "Kafka cluster",
              "path": "bootstrapServers",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The port where the HTTP Bridge is listening",
              "displayName": "HTTP port",
              "path": "http.port",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:number"]
            },
            {
              "description": "Limits describes the minimum/maximum amount of compute resources required/allowed",
              "displayName": "Resource Requirements",
              "path": "resources",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka Bridge conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1alpha1"
        },
        {
          "description": "Represents a topic inside a Kafka cluster",
          "displayName": "Kafka Topic",
          "kind": "KafkaTopic",
          "name": "kafkatopics.kafka.strimzi.io",
          "specDescriptors": [
            {
              "description": "The number of partitions",
              "displayName": "Partitions",
              "path": "partitions",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The number of replicas",
              "displayName": "Replication factor",
              "path": "replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka topic conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1beta1"
        },
        {
          "description": "Represents a user inside a Kafka cluster",
          "displayName": "Kafka User",
          "kind": "KafkaUser",
          "name": "kafkausers.kafka.strimzi.io",
          "resources": [{ "kind": "Secret", "name": "", "version": "v1" }],
          "specDescriptors": [
            {
              "description": "Authentication type",
              "displayName": "Authentication type",
              "path": "authentication.type",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:select:tls",
                "urn:alm:descriptor:com.tectonic.ui:select:scram-sha-512"
              ]
            },
            {
              "description": "Authorization type",
              "displayName": "Authorization type",
              "path": "authorization.type",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:select:simple"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka user conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1beta1"
        },
        {
          "description": "Represents a Connector inside a Kafka Connect cluster",
          "displayName": "Kafka Connector",
          "kind": "KafkaConnector",
          "name": "kafkaconnectors.kafka.strimzi.io",
          "specDescriptors": [
            {
              "description": "Class of the Kafka Connect connector",
              "displayName": "Class",
              "path": "class",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "Maximum number of tasks used by the connector",
              "displayName": "Max number of tasks",
              "path": "tasksMax",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Connector conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1alpha1"
        },
        {
          "description": "Represents a Kafka MirrorMaker 2 cluster",
          "displayName": "Kafka MirrorMaker 2",
          "kind": "KafkaMirrorMaker2",
          "name": "kafkamirrormaker2s.kafka.strimzi.io",
          "resources": [
            { "kind": "Deployment", "name": "", "version": "v1" },
            { "kind": "ReplicaSet", "name": "", "version": "v1" },
            { "kind": "Pod", "name": "", "version": "v1" }
          ],
          "specDescriptors": [
            {
              "description": "The desired number of Kafka MirrorMaker 2 nodes.",
              "displayName": "MirrorMaker2 nodes",
              "path": "replicas",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:podCount"]
            },
            {
              "description": "Kafka MirrorMaker 2 version",
              "displayName": "Version",
              "path": "version",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "The Kafka cluster where the underlying Kafka Cannect connects",
              "displayName": "Connect cluster",
              "path": "connectCluster",
              "x-descriptors": ["urn:alm:descriptor:com.tectonic.ui:text"]
            },
            {
              "description": "Limits describes the minimum/maximum amount of compute resources required/allowed",
              "displayName": "Resource Requirements",
              "path": "resources",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka MirrorMaker conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1alpha1"
        },
        {
          "description": "Triggeres rebalance of replicas in a Kafka cluster",
          "displayName": "Kafka Rebalance",
          "kind": "KafkaRebalance",
          "name": "kafkarebalances.kafka.strimzi.io",
          "specDescriptors": [
            {
              "description": "Skip hard Cruise Cotnrol goals",
              "displayName": "Skip hard goals",
              "path": "skipHardGoalCheck",
              "x-descriptors": [
                "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
              ]
            }
          ],
          "statusDescriptors": [
            {
              "description": "Kafka Rebalance conditions",
              "displayName": "Conditions",
              "path": "conditions",
              "x-descriptors": ["urn:alm:descriptor:io.kubernetes.conditions"]
            }
          ],
          "version": "v1alpha1"
        }
      ]
    },
    "description": "Strimzi provides a way to run an [Apache Kafka®](https://kafka.apache.org) cluster on  [Kubernetes](https://kubernetes.io/) or [OpenShift](https://www.openshift.com/) in various deployment configurations. See our [website](https://strimzi.io) for more details about the project.\n### New in 0.19\n* Support for scale subresource in `KafkaConnect`, `KafkaConnectS2I`, `KafkaBridge`, `KafkaMirrorMaker`, `KafkaMirrorMaker2`, and `KafkaConnector` resources\n* Use Java 11 as the Java runtime\n* Add support for Open Policy Agent for Kafka authorization\n* Use Strimzi Kafka Bridge 0.18.0\n* Make it possible to configure labels and annotations for secrets created by the User Operator\n* Remove deprecated `Kafka.spec.topicOperator` classes and deployment logic\n* Refactored the format of the `KafkaRebalance` resource's status. The state of the rebalance is now displayed in the associated `Condition`'s `type` field rather than the `status` field. This was done so that the information would display correctly in various Kubernetes tools.\n* Added performance tuning options to the `KafkaRebalance` CR and the ability to define a regular expression that will exclude matching topics from a rebalance optimization proposal.\n* Support dynamically changeable logging in the Entity Operator and Kafka Bridge \n### Supported Features\n* **Manages the Kafka Cluster** - Deploys and manages all of the components of this complex application, including dependencies like Apache ZooKeeper® that are traditionally hard to administer.\n* **Includes Kafka Connect** - Allows for configuration of common data sources and sinks to move data into and out of the Kafka cluster.\n* **Topic Management** - Creates and manages Kafka Topics within the cluster.\n* **User Management** - Creates and manages Kafka Users within the cluster.\n* **Connector Management** - Creates and manages Kafka Connect connectors.\n* **Includes Kafka Mirror Maker 1 and 2** - Allows for morroring data between different Apache Kafka® clusters.\n* **Includes HTTP Kafka Bridge** - Allows clients to send and receive messages through an Apache Kafka® cluster via HTTP protocol.\n* **Cluster Rebalancing** - Uses built-in Cruise Control for redistributes partition replicas according to specified goals in order to achieve the best cluster performance.\n* **Monitoring** - Built-in support for monitoring using Prometheus and provided Grafana dashabords\n### Upgrading your Clusters\nThe Strimzi Operator understands how to run and upgrade between a set of Kafka versions. When specifying a new version in your config, check to make sure you aren't using any features that may have been removed. See [the upgrade guide](https://strimzi.io/docs/operators/latest/deploying.html#assembly-upgrading-kafka-versions-str) for more information.\n### Storage\nAn efficient data storage infrastructure is essential to the optimal performance of Apache Kafka®. Apache Kafka® deployed via Strimzi requires block storage. The use of file storage (for example, NFS) is not recommended.\nThe Strimzi Operator supports three types of data storage:\n* Ephemeral (Recommended for development only!)\n* Persistent\n* JBOD (Just a Bunch of Disks, suitable for Kafka only. Not supported in Zookeeper.)\nStrimzi also supports advanced operations such as adding or removing disks in Apache Kafka® brokers or resizing the persistent volumes (where supported by the infrastructure).\n### Documentation\nDocumentation to the current _master_ branch as well as all releases can be found on our [website](https://strimzi.io/documentation).\n### Getting help\nIf you encounter any issues while using Strimzi, you can get help using:\n* [Strimzi mailing list on CNCF](https://lists.cncf.io/g/cncf-strimzi-users/topics)\n* [Strimzi Slack channel on CNCF workspace](https://cloud-native.slack.com/messages/strimzi)\n### Contributing\nYou can contribute by:\n* Raising any issues you find using Strimzi\n* Fixing issues by opening Pull Requests\n* Improving documentation\n* Talking about Strimzi\n\nAll bugs, tasks or enhancements are tracked as [GitHub issues](https://github.com/strimzi/strimzi-kafka-operator/issues). Issues which  might be a good start for new contributors are marked with [\"good-start\"](https://github.com/strimzi/strimzi-kafka-operator/labels/good-start) label.\n\nThe [Hacking guide](https://github.com/strimzi/strimzi-kafka-operator/blob/master/HACKING.md) describes how to build Strimzi and how to  test your changes before submitting a patch or opening a PR.\n\nThe [Documentation Contributor Guide](https://strimzi.io/contributing/guide/) describes how to contribute to Strimzi documentation.\n\nIf you want to get in touch with us first before contributing, you can use:\n* [Strimzi mailing list on CNCF](https://lists.cncf.io/g/cncf-strimzi-users/topics)\n* [Strimzi Slack channel on CNCF workspace](https://cloud-native.slack.com/messages/strimzi)\n### License\nStrimzi is licensed under the [Apache License, Version 2.0](https://github.com/strimzi/strimzi-kafka-operator/blob/master/LICENSE).\n",
    "displayName": "Strimzi",
    "icon": [
      {
        "base64data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDIyLjAuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPgo8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJIHZpZXdCb3g9IjAgMCA1MTIgNTk1IiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MTIgNTk1OyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+Cgkuc3Qwe2ZpbGw6IzE5MkM0Nzt9Cgkuc3Qxe2ZpbGw6dXJsKCNTVkdJRF8xXyk7fQoJLnN0MntmaWxsOnVybCgjU1ZHSURfMl8pO30KCS5zdDN7ZmlsbDp1cmwoI1NWR0lEXzNfKTt9Cgkuc3Q0e2ZpbGw6dXJsKCNTVkdJRF80Xyk7fQoJLnN0NXtmaWxsOnVybCgjU1ZHSURfNV8pO30KCS5zdDZ7ZmlsbDp1cmwoI1NWR0lEXzZfKTt9Cjwvc3R5bGU+CjxnPgoJPHBvbHlnb24gY2xhc3M9InN0MCIgcG9pbnRzPSIyNTYsNSAxLDE1Mi4yIDEsNDQ2LjcgMjU2LDU5My45IDUxMSw0NDYuNyA1MTEsMTUyLjIgMjU2LDUgCSIvPgoJPGxpbmVhckdyYWRpZW50IGlkPSJTVkdJRF8xXyIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIHgxPSIxMDkuNDk5NiIgeTE9Ijg0Ljk2MjIiIHgyPSI0NDAuOTUxNyIgeTI9Ijc5My44MTAyIj4KCQk8c3RvcCAgb2Zmc2V0PSIwIiBzdHlsZT0ic3RvcC1jb2xvcjojRkZGRkZGIi8+CgkJPHN0b3AgIG9mZnNldD0iMSIgc3R5bGU9InN0b3AtY29sb3I6IzU0QkFEOCIvPgoJPC9saW5lYXJHcmFkaWVudD4KCTxwYXRoIGNsYXNzPSJzdDEiIGQ9Ik0yNTYsNTYxbDIyNi41LTEzMC44di0yNi4zYy0zNy42LTcuMy04NC45LTE0LjMtMTQzLjUtMTkuM2MtMTk5LjItMTcuMi0xNC44LTU2LjYsNjguOS0xMjcuMQoJCVMxMzAsMTY1LjcsMTMwLDE2NS43czE0Ny42LDMxLDEzMi44LDUwYy0xMC41LDEzLjUtMTM0LjMsNDMuNS0yMzMuMyw4OC4xdjEyNi41TDI1Niw1NjF6Ii8+CjwvZz4KPC9zdmc+Cg==",
        "mediatype": "image/svg+xml"
      }
    ],
    "install": {
      "spec": {
        "clusterPermissions": [
          {
            "rules": [
              {
                "apiGroups": ["rbac.authorization.k8s.io"],
                "resources": ["clusterrolebindings"],
                "verbs": ["get", "create", "delete", "patch", "update", "watch"]
              },
              {
                "apiGroups": ["storage.k8s.io"],
                "resources": ["storageclasses"],
                "verbs": ["get"]
              },
              {
                "apiGroups": [""],
                "resources": ["nodes"],
                "verbs": ["get", "list"]
              }
            ],
            "serviceAccountName": "strimzi-cluster-operator"
          }
        ],
        "deployments": [
          {
            "name": "strimzi-cluster-operator-v0.19.0",
            "spec": {
              "replicas": 1,
              "selector": {
                "matchLabels": {
                  "name": "strimzi-cluster-operator",
                  "strimzi.io/kind": "cluster-operator"
                }
              },
              "strategy": { "type": "Recreate" },
              "template": {
                "metadata": {
                  "creationTimestamp": null,
                  "labels": {
                    "name": "strimzi-cluster-operator",
                    "strimzi.io/kind": "cluster-operator"
                  }
                },
                "spec": {
                  "containers": [
                    {
                      "args": ["/opt/strimzi/bin/cluster_operator_run.sh"],
                      "env": [
                        {
                          "name": "STRIMZI_NAMESPACE",
                          "valueFrom": {
                            "fieldRef": {
                              "fieldPath": "metadata.annotations['olm.targetNamespaces']"
                            }
                          }
                        },
                        {
                          "name": "STRIMZI_FULL_RECONCILIATION_INTERVAL_MS",
                          "value": "120000"
                        },
                        {
                          "name": "STRIMZI_OPERATION_TIMEOUT_MS",
                          "value": "300000"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_TLS_SIDECAR_ENTITY_OPERATOR_IMAGE",
                          "value": "docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_TLS_SIDECAR_KAFKA_IMAGE",
                          "value": "docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_KAFKA_EXPORTER_IMAGE",
                          "value": "docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_CRUISE_CONTROL_IMAGE",
                          "value": "docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_TLS_SIDECAR_CRUISE_CONTROL_IMAGE",
                          "value": "docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19"
                        },
                        {
                          "name": "STRIMZI_KAFKA_IMAGES",
                          "value": "2.4.0=docker.io/strimzi/kafka@sha256:df7007f48fb49969499b5191188ab299ff460d3bd04b2942b81e44088e5c47b7\n2.4.1=docker.io/strimzi/kafka@sha256:19fe5726d2702b8d2a80e1eeb3c2330c1efb528d275b9671cbc3dabe8fd25940\n2.5.0=docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19\n"
                        },
                        {
                          "name": "STRIMZI_KAFKA_CONNECT_IMAGES",
                          "value": "2.4.0=docker.io/strimzi/kafka@sha256:df7007f48fb49969499b5191188ab299ff460d3bd04b2942b81e44088e5c47b7\n2.4.1=docker.io/strimzi/kafka@sha256:19fe5726d2702b8d2a80e1eeb3c2330c1efb528d275b9671cbc3dabe8fd25940\n2.5.0=docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19\n"
                        },
                        {
                          "name": "STRIMZI_KAFKA_CONNECT_S2I_IMAGES",
                          "value": "2.4.0=docker.io/strimzi/kafka@sha256:df7007f48fb49969499b5191188ab299ff460d3bd04b2942b81e44088e5c47b7\n2.4.1=docker.io/strimzi/kafka@sha256:19fe5726d2702b8d2a80e1eeb3c2330c1efb528d275b9671cbc3dabe8fd25940\n2.5.0=docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19\n"
                        },
                        {
                          "name": "STRIMZI_KAFKA_MIRROR_MAKER_IMAGES",
                          "value": "2.4.0=docker.io/strimzi/kafka@sha256:df7007f48fb49969499b5191188ab299ff460d3bd04b2942b81e44088e5c47b7\n2.4.1=docker.io/strimzi/kafka@sha256:19fe5726d2702b8d2a80e1eeb3c2330c1efb528d275b9671cbc3dabe8fd25940\n2.5.0=docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19\n"
                        },
                        {
                          "name": "STRIMZI_KAFKA_MIRROR_MAKER_2_IMAGES",
                          "value": "2.4.0=docker.io/strimzi/kafka@sha256:df7007f48fb49969499b5191188ab299ff460d3bd04b2942b81e44088e5c47b7\n2.4.1=docker.io/strimzi/kafka@sha256:19fe5726d2702b8d2a80e1eeb3c2330c1efb528d275b9671cbc3dabe8fd25940\n2.5.0=docker.io/strimzi/kafka@sha256:961419d795036f5f491817a5652c8f30c531a7b3cafd245d9473812a6a632c19\n"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_TOPIC_OPERATOR_IMAGE",
                          "value": "docker.io/strimzi/operator@sha256:d8fed9eb28c6d024670b060527681e21c6744a6c7dd2bf48450ce577382d3646"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_USER_OPERATOR_IMAGE",
                          "value": "docker.io/strimzi/operator@sha256:d8fed9eb28c6d024670b060527681e21c6744a6c7dd2bf48450ce577382d3646"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_KAFKA_INIT_IMAGE",
                          "value": "docker.io/strimzi/operator@sha256:d8fed9eb28c6d024670b060527681e21c6744a6c7dd2bf48450ce577382d3646"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_KAFKA_BRIDGE_IMAGE",
                          "value": "docker.io/strimzi/kafka-bridge@sha256:07625a283342ae26f94aa002362bf7a7729553a9a1693e6a9e1648e7f12b7bc2"
                        },
                        {
                          "name": "STRIMZI_DEFAULT_JMXTRANS_IMAGE",
                          "value": "docker.io/strimzi/jmxtrans@sha256:1f4c19182a6bff0ad0f358284e1da3cbdc042b13623f23e19802400542bef89d"
                        },
                        { "name": "STRIMZI_LOG_LEVEL", "value": "INFO" }
                      ],
                      "image": "docker.io/strimzi/operator@sha256:d8fed9eb28c6d024670b060527681e21c6744a6c7dd2bf48450ce577382d3646",
                      "imagePullPolicy": "IfNotPresent",
                      "livenessProbe": {
                        "httpGet": { "path": "/healthy", "port": 8080 },
                        "initialDelaySeconds": 10,
                        "periodSeconds": 30
                      },
                      "name": "strimzi-cluster-operator",
                      "ports": [{ "containerPort": 8080, "name": "http" }],
                      "readinessProbe": {
                        "httpGet": { "path": "/ready", "port": 8080 },
                        "initialDelaySeconds": 10,
                        "periodSeconds": 30
                      },
                      "resources": {}
                    }
                  ],
                  "serviceAccountName": "strimzi-cluster-operator"
                }
              }
            }
          }
        ],
        "permissions": [
          {
            "rules": [
              {
                "apiGroups": [""],
                "resources": ["serviceaccounts"],
                "verbs": ["get", "create", "delete", "patch", "update"]
              },
              {
                "apiGroups": ["rbac.authorization.k8s.io"],
                "resources": ["rolebindings"],
                "verbs": ["get", "create", "delete", "patch", "update"]
              },
              {
                "apiGroups": [""],
                "resources": [
                  "configmaps",
                  "services",
                  "secrets",
                  "persistentvolumeclaims"
                ],
                "verbs": [
                  "get",
                  "list",
                  "watch",
                  "create",
                  "delete",
                  "patch",
                  "update"
                ]
              },
              {
                "apiGroups": ["kafka.strimzi.io"],
                "resources": [
                  "kafkas",
                  "kafkas/status",
                  "kafkaconnects",
                  "kafkaconnects/status",
                  "kafkaconnects2is",
                  "kafkaconnects2is/status",
                  "kafkaconnectors",
                  "kafkaconnectors/status",
                  "kafkamirrormakers",
                  "kafkamirrormakers/status",
                  "kafkabridges",
                  "kafkabridges/status",
                  "kafkamirrormaker2s",
                  "kafkamirrormaker2s/status",
                  "kafkarebalances",
                  "kafkarebalances/status",
                  "kafkatopics",
                  "kafkatopics/status",
                  "kafkausers",
                  "kafkausers/status"
                ],
                "verbs": [
                  "get",
                  "list",
                  "watch",
                  "create",
                  "delete",
                  "patch",
                  "update"
                ]
              },
              {
                "apiGroups": [""],
                "resources": ["pods"],
                "verbs": ["get", "list", "watch", "delete"]
              },
              {
                "apiGroups": [""],
                "resources": ["endpoints"],
                "verbs": ["get", "list", "watch"]
              },
              {
                "apiGroups": ["extensions"],
                "resources": [
                  "deployments",
                  "deployments/scale",
                  "replicasets",
                  "replicationcontrollers",
                  "networkpolicies",
                  "ingresses"
                ],
                "verbs": [
                  "get",
                  "list",
                  "watch",
                  "create",
                  "delete",
                  "patch",
                  "update"
                ]
              },
              {
                "apiGroups": ["apps"],
                "resources": [
                  "deployments",
                  "deployments/scale",
                  "deployments/status",
                  "statefulsets",
                  "replicasets"
                ],
                "verbs": [
                  "get",
                  "list",
                  "watch",
                  "create",
                  "delete",
                  "patch",
                  "update"
                ]
              },
              {
                "apiGroups": [""],
                "resources": ["events"],
                "verbs": ["create"]
              },
              {
                "apiGroups": ["apps.openshift.io"],
                "resources": [
                  "deploymentconfigs",
                  "deploymentconfigs/scale",
                  "deploymentconfigs/status",
                  "deploymentconfigs/finalizers"
                ],
                "verbs": [
                  "get",
                  "list",
                  "watch",
                  "create",
                  "delete",
                  "patch",
                  "update"
                ]
              },
              {
                "apiGroups": ["build.openshift.io"],
                "resources": ["buildconfigs", "builds"],
                "verbs": [
                  "create",
                  "delete",
                  "get",
                  "list",
                  "patch",
                  "watch",
                  "update"
                ]
              },
              {
                "apiGroups": ["image.openshift.io"],
                "resources": ["imagestreams", "imagestreams/status"],
                "verbs": [
                  "create",
                  "delete",
                  "get",
                  "list",
                  "watch",
                  "patch",
                  "update"
                ]
              },
              {
                "apiGroups": ["networking.k8s.io"],
                "resources": ["networkpolicies"],
                "verbs": [
                  "get",
                  "list",
                  "watch",
                  "create",
                  "delete",
                  "patch",
                  "update"
                ]
              },
              {
                "apiGroups": ["route.openshift.io"],
                "resources": ["routes", "routes/custom-host"],
                "verbs": ["get", "list", "create", "delete", "patch", "update"]
              },
              {
                "apiGroups": ["policy"],
                "resources": ["poddisruptionbudgets"],
                "verbs": [
                  "get",
                  "list",
                  "watch",
                  "create",
                  "delete",
                  "patch",
                  "update"
                ]
              }
            ],
            "serviceAccountName": "strimzi-cluster-operator"
          }
        ]
      },
      "strategy": "deployment"
    },
    "installModes": [
      { "supported": true, "type": "OwnNamespace" },
      { "supported": true, "type": "SingleNamespace" },
      { "supported": true, "type": "MultiNamespace" },
      { "supported": true, "type": "AllNamespaces" }
    ],
    "keywords": [
      "kafka",
      "messaging",
      "kafka-connect",
      "kafka-streams",
      "data-streaming",
      "data-streams",
      "streaming",
      "streams"
    ],
    "labels": { "name": "strimzi-cluster-operator" },
    "links": [
      { "name": "Website", "url": "https://strimzi.io/" },
      { "name": "Documentation", "url": "https://strimzi.io/documentation/" },
      {
        "name": "Mailing list",
        "url": "https://lists.cncf.io/g/cncf-strimzi-users/topics"
      },
      {
        "name": "Slack",
        "url": "https://cloud-native.slack.com/messages/strimzi"
      },
      {
        "name": "GitHub",
        "url": "https://github.com/strimzi/strimzi-kafka-operator"
      }
    ],
    "maintainers": [
      { "email": "cncf-strimzi-users@lists.cncf.io", "name": "Strimzi" }
    ],
    "maturity": "stable",
    "minKubeVersion": "1.11.0",
    "provider": { "name": "Strimzi" },
    "replaces": "strimzi-cluster-operator.v0.18.0",
    "selector": { "matchLabels": { "name": "strimzi-cluster-operator" } },
    "version": "0.19.0"
  },
  "status": {
    "conditions": [
      {
        "lastTransitionTime": "2020-07-29T16:47:33Z",
        "lastUpdateTime": "2020-07-29T16:47:33Z",
        "message": "requirements not yet checked",
        "phase": "Pending",
        "reason": "RequirementsUnknown"
      },
      {
        "lastTransitionTime": "2020-07-29T16:47:35Z",
        "lastUpdateTime": "2020-07-29T16:47:35Z",
        "message": "all requirements found, attempting install",
        "phase": "InstallReady",
        "reason": "AllRequirementsMet"
      },
      {
        "lastTransitionTime": "2020-07-29T16:47:38Z",
        "lastUpdateTime": "2020-07-29T16:47:38Z",
        "message": "waiting for install components to report healthy",
        "phase": "Installing",
        "reason": "InstallSucceeded"
      },
      {
        "lastTransitionTime": "2020-07-29T16:47:38Z",
        "lastUpdateTime": "2020-07-29T16:47:39Z",
        "message": "installing: waiting for deployment strimzi-cluster-operator-v0.19.0 to become ready: Waiting for rollout to finish: 0 of 1 updated replicas are available...\n",
        "phase": "Installing",
        "reason": "InstallWaiting"
      },
      {
        "lastTransitionTime": "2020-07-29T16:49:06Z",
        "lastUpdateTime": "2020-07-29T16:49:06Z",
        "message": "install strategy completed with no errors",
        "phase": "Succeeded",
        "reason": "InstallSucceeded"
      }
    ],
    "lastTransitionTime": "2020-07-29T16:49:06Z",
    "lastUpdateTime": "2020-07-29T16:49:06Z",
    "message": "install strategy completed with no errors",
    "phase": "Succeeded",
    "reason": "InstallSucceeded",
    "requirementStatus": [
      {
        "group": "operators.coreos.com",
        "kind": "ClusterServiceVersion",
        "message": "CSV minKubeVersion (1.11.0) less than server version (v1.17.1)",
        "name": "strimzi-cluster-operator.v0.19.0",
        "status": "Present",
        "version": "v1alpha1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkabridges.kafka.strimzi.io",
        "status": "Present",
        "uuid": "4a51158c-b040-4fd3-a26c-5c84c7473fb8",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkaconnectors.kafka.strimzi.io",
        "status": "Present",
        "uuid": "44c59471-4a68-4c49-a198-a8f058a6ef28",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkaconnects.kafka.strimzi.io",
        "status": "Present",
        "uuid": "489a587a-ae79-4016-82b5-2bd48ecf13cd",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkaconnects2is.kafka.strimzi.io",
        "status": "Present",
        "uuid": "c53cd745-3245-4b06-8f94-8b703eb4f729",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkamirrormaker2s.kafka.strimzi.io",
        "status": "Present",
        "uuid": "880ccb00-8d90-4813-a423-3f09d2bd031b",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkamirrormakers.kafka.strimzi.io",
        "status": "Present",
        "uuid": "ba639b49-0ee8-4321-8617-059eac35e23b",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkarebalances.kafka.strimzi.io",
        "status": "Present",
        "uuid": "4e714844-4691-4a4d-8ff1-76af1f90f197",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkas.kafka.strimzi.io",
        "status": "Present",
        "uuid": "8c99308f-6fe6-47ae-a1c0-05c92a563fc7",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkatopics.kafka.strimzi.io",
        "status": "Present",
        "uuid": "299607ac-db22-4371-bbf1-ffa4a38a6afd",
        "version": "v1beta1"
      },
      {
        "group": "apiextensions.k8s.io",
        "kind": "CustomResourceDefinition",
        "message": "CRD is present and Established condition is true",
        "name": "kafkausers.kafka.strimzi.io",
        "status": "Present",
        "uuid": "74796f1a-424f-4384-89c2-c5e500d5b8c5",
        "version": "v1beta1"
      },
      {
        "dependents": [
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"\"],\"resources\":[\"serviceaccounts\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"rbac.authorization.k8s.io\"],\"resources\":[\"rolebindings\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"\"],\"resources\":[\"configmaps\",\"services\",\"secrets\",\"persistentvolumeclaims\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"kafka.strimzi.io\"],\"resources\":[\"kafkas\",\"kafkas/status\",\"kafkaconnects\",\"kafkaconnects/status\",\"kafkaconnects2is\",\"kafkaconnects2is/status\",\"kafkaconnectors\",\"kafkaconnectors/status\",\"kafkamirrormakers\",\"kafkamirrormakers/status\",\"kafkabridges\",\"kafkabridges/status\",\"kafkamirrormaker2s\",\"kafkamirrormaker2s/status\",\"kafkarebalances\",\"kafkarebalances/status\",\"kafkatopics\",\"kafkatopics/status\",\"kafkausers\",\"kafkausers/status\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"delete\"],\"apiGroups\":[\"\"],\"resources\":[\"pods\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\"],\"apiGroups\":[\"\"],\"resources\":[\"endpoints\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"extensions\"],\"resources\":[\"deployments\",\"deployments/scale\",\"replicasets\",\"replicationcontrollers\",\"networkpolicies\",\"ingresses\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"apps\"],\"resources\":[\"deployments\",\"deployments/scale\",\"deployments/status\",\"statefulsets\",\"replicasets\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"create\"],\"apiGroups\":[\"\"],\"resources\":[\"events\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"apps.openshift.io\"],\"resources\":[\"deploymentconfigs\",\"deploymentconfigs/scale\",\"deploymentconfigs/status\",\"deploymentconfigs/finalizers\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"create\",\"delete\",\"get\",\"list\",\"patch\",\"watch\",\"update\"],\"apiGroups\":[\"build.openshift.io\"],\"resources\":[\"buildconfigs\",\"builds\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"create\",\"delete\",\"get\",\"list\",\"watch\",\"patch\",\"update\"],\"apiGroups\":[\"image.openshift.io\"],\"resources\":[\"imagestreams\",\"imagestreams/status\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"networking.k8s.io\"],\"resources\":[\"networkpolicies\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"route.openshift.io\"],\"resources\":[\"routes\",\"routes/custom-host\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "namespaced rule:{\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"patch\",\"update\"],\"apiGroups\":[\"policy\"],\"resources\":[\"poddisruptionbudgets\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "cluster rule:{\"verbs\":[\"get\",\"create\",\"delete\",\"patch\",\"update\",\"watch\"],\"apiGroups\":[\"rbac.authorization.k8s.io\"],\"resources\":[\"clusterrolebindings\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "cluster rule:{\"verbs\":[\"get\"],\"apiGroups\":[\"storage.k8s.io\"],\"resources\":[\"storageclasses\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "PolicyRule",
            "message": "cluster rule:{\"verbs\":[\"get\",\"list\"],\"apiGroups\":[\"\"],\"resources\":[\"nodes\"]}",
            "status": "Satisfied",
            "version": "v1beta1"
          }
        ],
        "group": "",
        "kind": "ServiceAccount",
        "message": "",
        "name": "strimzi-cluster-operator",
        "status": "Present",
        "version": "v1"
      }
    ]
  }
}

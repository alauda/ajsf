{
  "spec": {
    "type": "object",
    "properties": {
      "certificateExpirationPolicy": {
        "description": "How should CA certificate expiration be handled when `generateCertificateAuthority=true`. The default is for a new CA certificate to be generated reusing the existing private key.",
        "type": "string",
        "enum": ["renew-certificate", "replace-key"]
      },
      "hostname": {
        "description": "The hostname of the ingress / route",
        "type": "string"
      },
      "hostPort": {
        "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
        "type": "integer",
        "format": "int32"
      },
      "configMaps": {
        "type": "array",
        "items": {
          "description": "Config map to be mounted as volume into the grafana deployment",
          "type": "string"
        }
      },
      "ingress": {
        "type": "object",
        "properties": {
          "enabled": {
            "description": "Create an ingress / route",
            "type": "boolean",
            "default": true
          }
        }
      },
      "initContainers": {
        "description": "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
        "type": "array",
        "items": {
          "description": "A single application container that you want to run within a pod.",
          "type": "object",
          "required": ["name"],
          "properties": {
            "args": {
              "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "command": {
              "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "env": {
              "description": "List of environment variables to set in the container. Cannot be updated.",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                    "type": "string"
                  },
                  "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                    "type": "object",
                    "properties": {
                      "configMapKeyRef": {
                        "description": "Selects a key of a ConfigMap.",
                        "type": "object",
                        "required": ["key"],
                        "properties": {
                          "key": {
                            "description": "The key to select.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "fieldRef": {
                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                        "type": "object",
                        "required": ["fieldPath"],
                        "properties": {
                          "apiVersion": {
                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                            "type": "string"
                          },
                          "fieldPath": {
                            "description": "Path of the field to select in the specified API version.",
                            "type": "string"
                          }
                        }
                      },
                      "resourceFieldRef": {
                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                        "type": "object",
                        "required": ["resource"],
                        "properties": {
                          "containerName": {
                            "description": "Container name: required for volumes, optional for env vars",
                            "type": "string"
                          },
                          "divisor": {
                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Required: resource to select",
                            "type": "string"
                          }
                        }
                      },
                      "secretKeyRef": {
                        "description": "Selects a key of a secret in the pod's namespace",
                        "type": "object",
                        "required": ["key"],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "envFrom": {
              "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
              "type": "array",
              "items": {
                "description": "EnvFromSource represents the source of a set of ConfigMaps",
                "type": "object",
                "properties": {
                  "configMapRef": {
                    "description": "The ConfigMap to select from",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the ConfigMap must be defined",
                        "type": "boolean"
                      }
                    }
                  },
                  "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                    "type": "string"
                  },
                  "secretRef": {
                    "description": "The Secret to select from",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the Secret must be defined",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "name": {
              "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
              "type": "string"
            },
            "ports": {
              "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
              "type": "array",
              "items": {
                "description": "ContainerPort represents a network port in a single container.",
                "type": "object",
                "required": ["containerPort"],
                "properties": {
                  "containerPort": {
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "hostIP": {
                    "description": "What host IP to bind the external port to.",
                    "type": "string"
                  },
                  "hostPort": {
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                    "type": "string"
                  }
                }
              }
            },
            "volumeMounts": {
              "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
              "type": "array",
              "items": {
                "description": "VolumeMount describes a mounting of a Volume within a container.",
                "type": "object",
                "required": ["mountPath", "name"],
                "properties": {
                  "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                    "type": "string"
                  },
                  "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                    "type": "string"
                  },
                  "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                  },
                  "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                    "type": "boolean"
                  },
                  "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                    "type": "string"
                  },
                  "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                    "type": "string"
                  }
                }
              }
            },
            "workingDir": {
              "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
              "type": "string"
            }
          }
        }
      }
    }
  }
}
